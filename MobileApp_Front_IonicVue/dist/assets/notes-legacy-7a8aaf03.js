System.register(["./index-legacy-0ff49c16.js"],(function(t,e){"use strict";var r,o,n;return{setters:[t=>{r=t.X,o=t.u,n=t.Y}],execute:function(){const e="https://api-app-notes-ajvs.onrender.com";t("u",r("notes",{state:()=>({notes:[]}),actions:{async fetchNotes(){try{const t=o(),r=await n.get(`${e}/api/notes`,{headers:{Authorization:`Bearer ${t.user.token}`}});this.notes=r.data}catch(t){console.error("Error fetching notes:",t)}},async createNote(t){try{const r=o(),s=(await n.post(`${e}/api/notes`,t,{headers:{Authorization:`Bearer ${r.user.token}`}})).data;this.notes.push(s)}catch(r){console.error("Error creating note:",r)}},async deleteNote(t){try{const r=o();await n.delete(`${e}/api/notes/${t}`,{headers:{Authorization:`Bearer ${r.user.token}`}}),this.notes=this.notes.filter((e=>e.id!==t))}catch(r){console.error(`Error deleting note with id ${t}:`,r)}},async updateNote(t,r){try{const s=o();await n.put(`${e}/api/notes/${t}`,r,{headers:{Authorization:`Bearer ${s.user.token}`}});const a=this.notes.findIndex((e=>e.id===t));-1!==a&&(this.notes[a]={...this.notes[a],...r})}catch(s){console.error(`Error updating note with id ${t}:`,s)}},async fetchNoteById(t){try{const r=o();return(await n.get(`${e}/api/notes/${t}`,{headers:{Authorization:`Bearer ${r.user.token}`}})).data}catch(r){return console.error(`Error fetching note with id ${t}:`,r),null}}}}))}}}));
